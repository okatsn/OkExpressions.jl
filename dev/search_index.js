var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = OkExpressions","category":"page"},{"location":"#OkExpressions","page":"Home","title":"OkExpressions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for OkExpressions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [OkExpressions]","category":"page"},{"location":"#OkExpressions.expr_kwarg_int-Tuple{Any}","page":"Home","title":"OkExpressions.expr_kwarg_int","text":"expr_kwarg_int(keyword) returns regular expression that matches integer after \"keyword=\". Noted that whitespace is allowed after \"=\" but NOT allowd before.\n\nExample\n\n\nexpr = expr_kwarg_int(\"verbosity\")\nstr = \"fit!(mach; verbosity= 5)\"\nparse(Int, match(expr,str).match)\n\n# output\n\n5\n\nstr = \"fit!(mach; verbosity = 5)\"\nmatch(expr,str)\n\n# output\n\n\n\n\n\n\n\n","category":"method"},{"location":"#OkExpressions.gen_expr_startw-Tuple{Any}","page":"Home","title":"OkExpressions.gen_expr_startw","text":"gen_expr_startw(startingword) returns the regular expression that matches what starts with startingword in a new line; it also matches the tailing immediate colon (\":\") and whitespaces if any. After that, the remaining characters before a newline is stored as a group match of group name myhead that you can call it as shown in the following example:\n\ntargetstr = \"KEYNOTE:  My Title\"\nexpr = gen_expr_startw(\"KEYNOTE\")\nmyhead = match(expr, targetstr).captures[end]\n\n# output\n\n\"My Title\"\n\nor apply it in replace:\n\nreplace(\"KEYNOTE:  My Title\", expr => s\"!!! note \\g<myhead>\")\n\n# output\n\n\"!!! note My Title\"\n\n\n\n\n\n","category":"method"},{"location":"#OkExpressions.@addmyexpressions_1-Tuple{Vararg{String}}","page":"Home","title":"OkExpressions.@addmyexpressions_1","text":"This macro generates variable named expr_startw_... using the expression generator gen_expr_startw. See gen_expr_startw. Julia automatically generate functions and export them\n\nNote\n\nThis macro (and also its test) is superfluous and experimental for metaprogramming.\n\n\n\n\n\n","category":"macro"}]
}
